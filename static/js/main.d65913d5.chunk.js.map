{"version":3,"sources":["lib/fsm/FSM.ts","lib/fsm/use-fsm.ts","components/FsmGraph.tsx","utils/statesToGraph.ts","components/FsmView.tsx","components/CodeView.tsx","atoms/Box.tsx","atoms/Select.tsx","atoms/Footer.ts","atoms/index.tsx","mock.ts","components/FsmDemo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FSM","states","initial","size","TypeError","undefined","has","keys","next","value","action","this","allowedActions","currentState","state","assertValidAction","nextState","get","assertValidState","dispatchEvent","StateChangedEvent","Set","EventTarget","EVENTS","stateChanged","current","prev","Event","useFsm","initialState","fsm","useMemo","useState","setCurrentState","doAction","useCallback","onChange","e","useEffect","addEventListener","FsmGraph","dataRef","useRef","data","nodes","Array","from","entries","map","actions","id","label","color","border","Boolean","edges","filter","flatMap","target","to","statesToGraph","selectNodes","style","outlineWidth","height","width","graph","options","interaction","zoomView","selectable","dragView","dragNodes","selectConnectedEdges","background","highlight","smooth","enabled","type","roundness","length","arrows","inherit","physics","layout","randomSeed","getNetwork","ActionButton","styled","button","Actions","key","onClick","disabled","div","SyntaxHighlighter","registerLanguage","js","children","language","codeTheme","Box","Select","selected","renderItem","item","Footer","footer","Theme","styles","css","trafficLight","Map","ballPointPen","passwordValidator","interviewProcess","demoNames","Object","demos","setSelected","Container","CodeView","FsmView","App","href","FsmDemo","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d65913d5.chunk.js","sourcesContent":["export type StateName = string;\nexport type ActionName = string;\nexport type States = Map<StateName, Actions>;\nexport type Actions = Map<ActionName, StateName> | null;\n\nexport default class FSM extends EventTarget {\n  static EVENTS = {\n    stateChanged: \"stateChanged\",\n  };\n  #states: States;\n  #currentState: StateName;\n\n  constructor(states: States, initial?: StateName) {\n    super();\n\n    if (states.size === 0) {\n      throw new TypeError(`states must not be empty`);\n    }\n\n    if (initial !== undefined) {\n      if (!states.has(initial)) {\n        throw new TypeError(`Initial state \"${initial}\" is not a valid state`);\n      }\n\n      this.#currentState = initial;\n    } else {\n      // Use first inserted key as initial\n      // Note from MDN: The keys() method returns the keys in insertion order.\n      this.#currentState = states.keys().next().value;\n    }\n\n    this.#states = states;\n  }\n\n  get currentState() {\n    return this.#currentState;\n  }\n\n  get allowedActions(): Set<ActionName> {\n    return new Set(this.#states.get(this.#currentState)?.keys());\n  }\n\n  assertValidAction(action?: ActionName | null): asserts action {\n    if (!action || !this.allowedActions.has(action)) {\n      throw new TypeError(\n        `State \"${this.currentState}\" has no \"${action}\" action`\n      );\n    }\n  }\n\n  assertValidState(state?: StateName | null): asserts state {\n    if (!state || !this.#states.has(state)) {\n      throw new TypeError(`State \"${state}\" is not valid`);\n    }\n  }\n\n  doAction(action: ActionName) {\n    this.assertValidAction(action);\n\n    // I use `!` because we should allays have a state entry for\n    //  the current state as its asserted in assertValidAction\n    const nextState = this.#states.get(this.#currentState)!.get(action);\n\n    this.assertValidState(nextState);\n\n    this.dispatchEvent(\n      new StateChangedEvent(nextState, action, this.currentState)\n    );\n\n    this.#currentState = nextState;\n  }\n}\n\nexport class StateChangedEvent<StateName> extends Event {\n  prev: StateName;\n  action: ActionName;\n  current: StateName;\n\n  constructor(current: StateName, action: ActionName, prev: StateName) {\n    super(FSM.EVENTS.stateChanged);\n\n    this.prev = prev;\n    this.action = action;\n    this.current = current;\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport FSM, { ActionName, StateChangedEvent, StateName, States } from \"./FSM\";\n\ntype FsmHookResult = [StateName, Pick<FSM, \"doAction\" | \"allowedActions\">];\n\nfunction useFsm(states: States, initialState?: StateName): FsmHookResult {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fsm = useMemo<FSM>(() => new FSM(states, initialState), []);\n\n  const [currentState, setCurrentState] = useState<StateName>(fsm.currentState);\n  const doAction = useCallback((action: ActionName) => fsm.doAction(action), [\n    fsm,\n  ]);\n  const onChange = useCallback(\n    (e: Event) => setCurrentState((e as StateChangedEvent<StateName>).current),\n    []\n  );\n\n  useEffect(() => {\n    fsm.addEventListener(FSM.EVENTS.stateChanged, onChange);\n    return () => fsm.addEventListener(FSM.EVENTS.stateChanged, onChange);\n  }, [fsm, onChange]);\n\n  const { allowedActions } = fsm;\n  return [\n    currentState!,\n    {\n      doAction,\n      allowedActions,\n    },\n  ];\n}\n\nexport default useFsm;\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport statesToGraph from \"../utils/statesToGraph\";\nimport Graph from \"react-graph-vis\";\nimport { States, StateName } from \"../lib/fsm\";\nimport { Network } from \"vis\";\n\nconst color = \"black\";\n\ntype Props = {\n  states: States;\n  initial?: StateName;\n  current: StateName;\n};\n\nfunction FsmGraph({ states, current }: Props) {\n  const dataRef = useRef<Network | null>(null);\n\n  const data = useMemo(() => statesToGraph(states), [states]);\n\n  useEffect(() => {\n    if (current) {\n      dataRef.current?.selectNodes([current]);\n    }\n  }, [current]);\n\n  return (\n    <div\n      style={{\n        outlineWidth: 0,\n        height: \"400px\",\n        width: \"500px\",\n      }}\n    >\n      <Graph\n        graph={data}\n        options={{\n          interaction: {\n            zoomView: false,\n            selectable: false,\n            dragView: false,\n            dragNodes: false,\n            selectConnectedEdges: false,\n          },\n          nodes: {\n            color: {\n              background: \"white\",\n              border: color,\n              highlight: { background: \"white\", border: \"green\" },\n            },\n          },\n          edges: {\n            smooth: {\n              enabled: true,\n              type: \"dynamic\",\n              roundness: 0.5,\n            },\n            length: 150,\n            arrows: { to: true },\n            color: {\n              inherit: false,\n              highlight: color,\n              color: color,\n            },\n          },\n          physics: { enabled: true },\n          layout: { randomSeed: 1 },\n        }}\n        getNetwork={(data) => {\n          dataRef.current = data;\n        }}\n      />\n    </div>\n  );\n}\n\nexport default FsmGraph;\n","import { States } from \"../lib/fsm\";\n\nexport default function statesToGraph(states: States) {\n  return {\n    nodes: Array.from(states.entries()).map(([state, actions]) => ({\n      id: state,\n      label: state,\n      color: { border: Boolean(actions) ? undefined : \"red\" },\n    })),\n    edges: Array.from(states.entries())\n      .filter(([_, actions]) => actions !== null)\n      .flatMap(([state, actions]) => {\n        return Array.from(actions!.entries()).map(([action, target]) => ({\n          from: state,\n          to: target,\n          label: action,\n        }));\n      }),\n  };\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useFsm, States } from \"../lib/fsm\";\nimport FsmGraph from \"./FsmGraph\";\n\nconst ActionButton = styled.button`\n  padding: 0.5rem 1rem;\n  &:first-of-type {\n    margin-left: 1rem;\n  }\n  &:not(:last-of-type) {\n    margin-right: 1rem;\n  }\n`;\n\ntype Props = {\n  states: States;\n};\n\nexport default function ({ states }: Props) {\n  const [current, { allowedActions, doAction }] = useFsm(states);\n\n  return (\n    <>\n      <FsmGraph states={states} current={current} />\n      <Actions>\n        <pre>Current state: {current}</pre>\n        <pre>\n          Actions:\n          {allowedActions.size ? (\n            Array.from(allowedActions).map((action) => (\n              <ActionButton key={action} onClick={() => doAction(action)}>\n                {action}\n              </ActionButton>\n            ))\n          ) : (\n            <ActionButton disabled>No actions allowed</ActionButton>\n          )}\n        </pre>\n      </Actions>\n    </>\n  );\n}\n\nconst Actions = styled.div`\n  display: flex;\n\n  align-items: center;\n  justify-content: space-around;\n`;\n","import React from \"react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport js from \"react-syntax-highlighter/dist/esm/languages/hljs/javascript\";\nimport codeTheme from \"react-syntax-highlighter/dist/esm/styles/hljs/github-gist\";\n\nSyntaxHighlighter.registerLanguage(\"javascript\", js);\n\nexport default function ({ children }: { children: string }) {\n  return (\n    <SyntaxHighlighter language={\"javascript\"} style={codeTheme}>\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nconst Box = styled.div`\n  border: 1px solid var(--color-bg-secondary);\n  border-radius: var(--border-radius);\n  box-shadow: var(--box-shadow) var(--color-shadow);\n  margin: 1rem;\n  padding: 1.25rem;\n`;\n\nexport default Box;\n","import React, { ReactNode } from \"react\";\n\ntype Props<T> = {\n  selected?: T | null;\n  options: Array<T>;\n  onChange(selected: T): void;\n  renderItem?(item: T): ReactNode;\n};\n\nfunction Select<T extends string>({\n  options,\n  selected,\n  onChange,\n  renderItem,\n}: Props<T>) {\n  return (\n    <select onChange={(e) => onChange(e.target.value as T)}>\n      {options.map((item) => (\n        <option key={item} selected={item === selected}>\n          {renderItem?.(item) ?? item}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport default Select;\n","import styled from \"@emotion/styled\";\n\nconst Footer = styled.footer`\n  text-align: center;\n  padding: 1rem;\n`;\n\nexport default Footer;\n","import React from \"react\";\nimport { css, Global } from \"@emotion/core\";\n\nexport function Theme() {\n  return (\n    <Global\n      styles={css`\n        :root {\n          --border-radius: 5px;\n          --box-shadow: 2px 2px 10px;\n          --color: #118bee;\n          --color-accent: #118bee15;\n          --color-bg: #fff;\n          --color-bg-secondary: #e9e9e9;\n          --color-secondary: #920de9;\n          --color-secondary-accent: #920de90b;\n          --color-shadow: #f4f4f4;\n          --color-text: #000;\n          --color-text-secondary: #999;\n          --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n            Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n          --hover-brightness: 1.2;\n          --justify-important: center;\n          --justify-normal: left;\n          --line-height: 1.5;\n          --width-card: 285px;\n          --width-card-medium: 460px;\n          --width-card-wide: 800px;\n          --width-content: 1080px;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :root {\n            --color: #0097fc;\n            --color-accent: #0097fc4f;\n            --color-bg: #333;\n            --color-bg-secondary: #555;\n            --color-secondary: #e20de9;\n            --color-secondary-accent: #e20de94f;\n            --color-shadow: #bbbbbb20;\n            --color-text: #f7f7f7;\n            --color-text-secondary: #aaa;\n          }\n        }\n\n        h1,\n        h2,\n        h3 {\n          text-align: center;\n        }\n      `}\n    />\n  );\n}\n\nexport { default as Box } from \"./Box\";\nexport { default as Select } from \"./Select\";\nexport { default as Footer } from \"./Footer\";\n","export const trafficLight = {\n  data: new Map([\n    [\"red\", new Map([[\"yellow\", \"yellow\"]])],\n    [\n      \"yellow\",\n      new Map([\n        [\"red\", \"red\"],\n        [\"green\", \"green\"],\n      ]),\n    ],\n    [\"green\", new Map([[\"yellow\", \"yellow\"]])],\n  ]),\n};\n\nexport const ballPointPen = {\n  data: new Map([\n    [\"close\", new Map([[\"click\", \"open\"]])],\n    [\"open\", new Map([[\"click\", \"close\"]])],\n  ]),\n};\n\nexport const passwordValidator = {\n  data: new Map([\n    [\n      \"locked\",\n      new Map([\n        [\"press 1\", \"1\"],\n        [\"other digit\", \"locked\"],\n      ]),\n    ],\n    [\n      \"1\",\n      new Map([\n        [\"press 2\", \"2\"],\n        [\"other digit\", \"locked\"],\n      ]),\n    ],\n    [\n      \"2\",\n      new Map([\n        [\"press 3\", \"3\"],\n        [\"other digit\", \"locked\"],\n      ]),\n    ],\n    [\n      \"3\",\n      new Map([\n        [\"press 4\", \"4\"],\n        [\"other digit\", \"locked\"],\n      ]),\n    ],\n    [\n      \"4\",\n      new Map([\n        [\"press *\", \"unlocked\"],\n        [\"other digit\", \"locked\"],\n      ]),\n    ],\n    [\"unlocked\", new Map([[\"press lock\", \"locked\"]])],\n  ]),\n};\n\nexport const interviewProcess = {\n  data: new Map([\n    [\n      \"start\",\n      new Map([\n        [\"go\", \"phone interview\"],\n        [\"no go\", \"withdrawn\"],\n      ]),\n    ],\n    [\n      \"phone interview\",\n      new Map([\n        [\"go\", \"technical interview\"],\n        [\"no go\", \"withdrawn\"],\n      ]),\n    ],\n    [\n      \"technical interview\",\n      new Map([\n        [\"go\", \"final interview\"],\n        // [\"no go\", \"withdrawn\"],\n      ]),\n    ],\n    [\n      \"final interview\",\n      new Map([\n        [\"no go\", \"withdrawn\"],\n        [\"go\", \"hired\"],\n      ]),\n    ],\n    [\"hired\", new Map([[\"work\", \"hired\"]])],\n    [\"withdrawn\", null],\n  ]),\n};\n","import FsmView from \"./FsmView\";\nimport React, { useMemo, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport CodeView from \"./CodeView\";\nimport { Box, Select } from \"../atoms\";\nimport * as demos from \"../mock\";\n\ntype DemoName = keyof typeof demos;\n\nconst codeExample =\n  \"function FSM() {\\n\" +\n  \"  const [currentState, { allowedActions, doAction }] = useFsm(states);\\n\" +\n  \"  return (\\n\" +\n  \"    <>\\n\" +\n  \"      <pre>Current state: {currentState}</pre>\\n\" +\n  \"      <pre>\\n\" +\n  \"        Actions:\\n\" +\n  \"        {allowedActions.size ? (\\n\" +\n  \"          Array.from(allowedActions).map((action) => (\\n\" +\n  \"            <button key={action} onClick={() => doAction(action)}>\\n\" +\n  \"              {action}\\n\" +\n  \"            </button>\\n\" +\n  \"          ))\\n\" +\n  \"        ) : (\\n\" +\n  \"          <button disabled>N/A</button>\\n\" +\n  \"        )}\\n\" +\n  \"      </pre>\\n\" +\n  \"    </>\\n\" +\n  \"  );\\n\" +\n  \"}\\n\";\n\nexport default function () {\n  const demoNames = useMemo<Array<DemoName>>(\n    () => Object.keys(demos) as Array<DemoName>,\n    []\n  );\n\n  const [selected, setSelected] = useState<DemoName>(demoNames[0]);\n\n  return (\n    <Container>\n      <CodeView>{codeExample}</CodeView>\n      <Box>\n        <pre>\n          const states ={\" \"}\n          <Select\n            selected={selected}\n            options={demoNames}\n            onChange={(item) => setSelected(item)}\n          />\n        </pre>\n        <FsmView key={selected} states={demos[selected].data} />\n      </Box>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n`;\n","import React from \"react\";\nimport FsmDemo from \"./components/FsmDemo\";\nimport { Footer, Theme } from \"./atoms\";\n\nexport default function App() {\n  return (\n    <>\n      <Theme />\n      <header>\n        <h1>react-fsm</h1>\n        <h2>\n          A react hook for creating{\" \"}\n          <a href={\"https://en.wikipedia.org/wiki/Finite-state_machine\"}>\n            Finite-state machine\n          </a>\n        </h2>\n      </header>\n      <main>\n        <FsmDemo />\n      </main>\n      <Footer>\n        Created by{\" \"}\n        <a href={\"https://github.com/daniel-hauser\"}>Daniel Hauser</a>\n      </Footer>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}