{"version":3,"sources":["atoms/Box.tsx","atoms/Select.tsx","atoms/Footer.ts","atoms/index.tsx","components/CodeView.tsx","lib/fsm/FSM.ts","lib/fsm/use-fsm.ts","components/FsmGraph.tsx","utils/statesToGraph.ts","components/FsmView.tsx","components/SelectExample.tsx","components/FsmDemo.tsx","utils/parseStates.ts","hooks/useFsmExamples.ts","components/FsmExample.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","styled","div","Select","options","selected","onChange","renderItem","e","target","value","map","item","key","Footer","footer","Theme","styles","css","SyntaxHighlighter","registerLanguage","js","children","language","style","codeTheme","FSM","states","initial","size","TypeError","undefined","has","keys","next","action","this","allowedActions","currentState","state","assertValidAction","nextState","get","assertValidState","dispatchEvent","StateChangedEvent","Set","EventTarget","EVENTS","stateChanged","current","prev","Event","useFsm","initialState","fsm","useMemo","useState","setCurrentState","doAction","useCallback","useEffect","addEventListener","FsmGraph","dataRef","useRef","data","nodes","Array","from","entries","actions","id","label","color","border","Boolean","edges","filter","flatMap","to","statesToGraph","selectNodes","outlineWidth","height","width","graph","interaction","zoomView","selectable","dragView","dragNodes","selectConnectedEdges","background","highlight","smooth","enabled","type","roundness","length","arrows","inherit","physics","layout","randomSeed","getNetwork","ActionButton","button","Actions","onClick","disabled","SelectExample","examples","name","example","find","Loader","speed","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","cx","cy","r","FsmDemo","setSelected","FsmView","statesFromJson","Map","stateName","loadExamplesFromServer","a","fetch","process","response","json","ExampleContainer","FsmExample","useAsync","error","loading","examplesList","useFsmExamples","CodeView","App","href","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5f44eb7c.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nconst Box = styled.div`\n  border: 1px solid var(--color-bg-secondary);\n  border-radius: var(--border-radius);\n  box-shadow: var(--box-shadow) var(--color-shadow);\n  margin: 1rem;\n  padding: 1.25rem;\n`;\n\nexport default Box;\n","import React, { ReactNode } from \"react\";\n\ntype Props<T> = {\n  selected?: T | null;\n  options: Array<T>;\n  onChange(selected: T): void;\n  renderItem?(item: T): ReactNode;\n};\n\nfunction Select<T extends string>({\n  options,\n  selected,\n  onChange,\n  renderItem,\n}: Props<T>) {\n  return (\n    <select onChange={(e) => onChange(e.target.value as T)}>\n      {options.map((item) => (\n        <option key={item} selected={item === selected}>\n          {renderItem?.(item) ?? item}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport default Select;\n","import styled from \"@emotion/styled\";\n\nconst Footer = styled.footer`\n  text-align: center;\n  padding: 1rem;\n`;\n\nexport default Footer;\n","import React from \"react\";\nimport { css, Global } from \"@emotion/core\";\n\nexport function Theme() {\n  return (\n    <Global\n      styles={css`\n        :root {\n          --border-radius: 5px;\n          --box-shadow: 2px 2px 10px;\n          --color: #118bee;\n          --color-accent: #118bee15;\n          --color-bg: #fff;\n          --color-bg-secondary: #e9e9e9;\n          --color-secondary: #920de9;\n          --color-secondary-accent: #920de90b;\n          --color-shadow: #f4f4f4;\n          --color-text: #000;\n          --color-text-secondary: #999;\n          --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n            Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n          --hover-brightness: 1.2;\n          --justify-important: center;\n          --justify-normal: left;\n          --line-height: 1.5;\n          --width-card: 285px;\n          --width-card-medium: 460px;\n          --width-card-wide: 800px;\n          --width-content: 1080px;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :root {\n            --color: #0097fc;\n            --color-accent: #0097fc4f;\n            --color-bg: #333;\n            --color-bg-secondary: #555;\n            --color-secondary: #e20de9;\n            --color-secondary-accent: #e20de94f;\n            --color-shadow: #bbbbbb20;\n            --color-text: #f7f7f7;\n            --color-text-secondary: #aaa;\n          }\n        }\n\n        h1,\n        h2,\n        h3 {\n          text-align: center;\n        }\n      `}\n    />\n  );\n}\n\nexport { default as Box } from \"./Box\";\nexport { default as Select } from \"./Select\";\nexport { default as Footer } from \"./Footer\";\n","import React from \"react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport js from \"react-syntax-highlighter/dist/esm/languages/hljs/javascript\";\nimport codeTheme from \"react-syntax-highlighter/dist/esm/styles/hljs/github-gist\";\n\nSyntaxHighlighter.registerLanguage(\"javascript\", js);\n\nexport default function ({ children }: { children: string }) {\n  return (\n    <SyntaxHighlighter language={\"javascript\"} style={codeTheme}>\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n","export type StateName = string;\nexport type ActionName = string;\nexport type States = Map<StateName, Actions>;\nexport type Actions = Map<ActionName, StateName> | null;\n\nexport default class FSM extends EventTarget {\n  static EVENTS = {\n    stateChanged: \"stateChanged\",\n  };\n  #states: States;\n  #currentState: StateName;\n\n  constructor(states: States, initial?: StateName) {\n    super();\n\n    if (states.size === 0) {\n      throw new TypeError(`states must not be empty`);\n    }\n\n    if (initial !== undefined) {\n      if (!states.has(initial)) {\n        throw new TypeError(`Initial state \"${initial}\" is not a valid state`);\n      }\n\n      this.#currentState = initial;\n    } else {\n      // Use first inserted key as initial\n      // Note from MDN: The keys() method returns the keys in insertion order.\n      this.#currentState = states.keys().next().value;\n    }\n\n    this.#states = states;\n  }\n\n  get currentState() {\n    return this.#currentState;\n  }\n\n  get allowedActions(): Set<ActionName> {\n    return new Set(this.#states.get(this.#currentState)?.keys());\n  }\n\n  assertValidAction(action?: ActionName | null): asserts action {\n    if (!action || !this.allowedActions.has(action)) {\n      throw new TypeError(\n        `State \"${this.currentState}\" has no \"${action}\" action`\n      );\n    }\n  }\n\n  assertValidState(state?: StateName | null): asserts state {\n    if (!state || !this.#states.has(state)) {\n      throw new TypeError(`State \"${state}\" is not valid`);\n    }\n  }\n\n  doAction(action: ActionName) {\n    this.assertValidAction(action);\n\n    // I use `!` because we should allays have a state entry for\n    //  the current state as its asserted in assertValidAction\n    const nextState = this.#states.get(this.#currentState)!.get(action);\n\n    this.assertValidState(nextState);\n\n    this.dispatchEvent(\n      new StateChangedEvent(nextState, action, this.currentState)\n    );\n\n    this.#currentState = nextState;\n  }\n}\n\nexport class StateChangedEvent<StateName> extends Event {\n  prev: StateName;\n  action: ActionName;\n  current: StateName;\n\n  constructor(current: StateName, action: ActionName, prev: StateName) {\n    super(FSM.EVENTS.stateChanged);\n\n    this.prev = prev;\n    this.action = action;\n    this.current = current;\n  }\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport FSM, { ActionName, StateChangedEvent, StateName, States } from \"./FSM\";\n\ntype FsmHookResult = [StateName, Pick<FSM, \"doAction\" | \"allowedActions\">];\n\nfunction useFsm(states: States, initialState?: StateName): FsmHookResult {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fsm = useMemo<FSM>(() => new FSM(states, initialState), []);\n\n  const [currentState, setCurrentState] = useState<StateName>(fsm.currentState);\n  const doAction = useCallback((action: ActionName) => fsm.doAction(action), [\n    fsm,\n  ]);\n  const onChange = useCallback(\n    (e: Event) => setCurrentState((e as StateChangedEvent<StateName>).current),\n    []\n  );\n\n  useEffect(() => {\n    fsm.addEventListener(FSM.EVENTS.stateChanged, onChange);\n    return () => fsm.addEventListener(FSM.EVENTS.stateChanged, onChange);\n  }, [fsm, onChange]);\n\n  const { allowedActions } = fsm;\n  return [\n    currentState!,\n    {\n      doAction,\n      allowedActions,\n    },\n  ];\n}\n\nexport default useFsm;\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport statesToGraph from \"../utils/statesToGraph\";\nimport Graph from \"react-graph-vis\";\nimport { States, StateName } from \"../lib/fsm\";\nimport { Network } from \"vis\";\n\nconst color = \"black\";\n\ntype Props = {\n  states: States;\n  initial?: StateName;\n  current: StateName;\n};\n\nfunction FsmGraph({ states, current }: Props) {\n  const dataRef = useRef<Network | null>(null);\n\n  const data = useMemo(() => statesToGraph(states), [states]);\n\n  useEffect(() => {\n    if (current) {\n      dataRef.current?.selectNodes([current]);\n    }\n  }, [current]);\n\n  return (\n    <div\n      style={{\n        outlineWidth: 0,\n        height: \"400px\",\n        width: \"500px\",\n      }}\n    >\n      <Graph\n        graph={data}\n        options={{\n          interaction: {\n            zoomView: false,\n            selectable: false,\n            dragView: false,\n            dragNodes: false,\n            selectConnectedEdges: false,\n          },\n          nodes: {\n            color: {\n              background: \"white\",\n              border: color,\n              highlight: { background: \"white\", border: \"green\" },\n            },\n          },\n          edges: {\n            smooth: {\n              enabled: true,\n              type: \"dynamic\",\n              roundness: 0.5,\n            },\n            length: 150,\n            arrows: { to: true },\n            color: {\n              inherit: false,\n              highlight: color,\n              color: color,\n            },\n          },\n          physics: { enabled: true },\n          layout: { randomSeed: 1 },\n        }}\n        getNetwork={(data) => {\n          dataRef.current = data;\n        }}\n      />\n    </div>\n  );\n}\n\nexport default FsmGraph;\n","import { States } from \"../lib/fsm\";\n\nexport default function statesToGraph(states: States) {\n  return {\n    nodes: Array.from(states.entries()).map(([state, actions]) => ({\n      id: state,\n      label: state,\n      color: { border: Boolean(actions) ? undefined : \"red\" },\n    })),\n    edges: Array.from(states.entries())\n      .filter(([_, actions]) => actions !== null)\n      .flatMap(([state, actions]) => {\n        return Array.from(actions!.entries()).map(([action, target]) => ({\n          from: state,\n          to: target,\n          label: action,\n        }));\n      }),\n  };\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useFsm, States } from \"../lib/fsm\";\nimport FsmGraph from \"./FsmGraph\";\n\nconst ActionButton = styled.button`\n  padding: 0.5rem 1rem;\n  &:first-of-type {\n    margin-left: 1rem;\n  }\n  &:not(:last-of-type) {\n    margin-right: 1rem;\n  }\n`;\n\ntype Props = {\n  states: States;\n};\n\nexport default function ({ states }: Props) {\n  const [current, { allowedActions, doAction }] = useFsm(states);\n\n  return (\n    <>\n      <FsmGraph states={states} current={current} />\n      <Actions>\n        <pre>Current state: {current}</pre>\n        <pre>\n          Actions:\n          {allowedActions.size ? (\n            Array.from(allowedActions).map((action) => (\n              <ActionButton key={action} onClick={() => doAction(action)}>\n                {action}\n              </ActionButton>\n            ))\n          ) : (\n            <ActionButton disabled>N/A</ActionButton>\n          )}\n        </pre>\n      </Actions>\n    </>\n  );\n}\n\nconst Actions = styled.div`\n  display: flex;\n\n  align-items: center;\n  justify-content: space-between;\n`;\n","import React from \"react\";\nimport { Select } from \"../atoms\";\nimport { FsmDef } from \"../utils/parseStates\";\n\ntype Props = {\n  examples: Array<FsmDef>;\n  selected?: FsmDef;\n  onChange(example: FsmDef): void;\n};\n\nfunction SelectExample({ examples, selected, onChange }: Props) {\n  return (\n    <Select\n      selected={selected?.name}\n      options={examples.map((example) => example.name)}\n      onChange={(item) => {\n        onChange(examples.find((example) => example.name === item)!);\n      }}\n    />\n  );\n}\n\nexport default SelectExample;\n","import FsmView from \"./FsmView\";\nimport React, { useState } from \"react\";\nimport { FsmDef } from \"../utils/parseStates\";\nimport SelectExample from \"./SelectExample\";\nimport ContentLoader from \"react-content-loader\";\n\ntype Props = {\n  examples: Array<FsmDef>;\n};\n\nfunction FsmDemo({ examples }: Props) {\n  const [selected, setSelected] = useState<FsmDef>(examples[0]);\n\n  return (\n    <>\n      <pre>\n        const states ={\" \"}\n        <SelectExample\n          examples={examples}\n          selected={selected}\n          onChange={setSelected}\n        />\n      </pre>\n      {selected && <FsmView key={selected.name} states={selected.states} />}\n    </>\n  );\n}\n\nfunction Loader() {\n  return (\n    <ContentLoader\n      speed={2}\n      width={400}\n      height={400}\n      viewBox=\"0 0 400 400\"\n      backgroundColor=\"#f3f3f3\"\n      foregroundColor=\"#ecebeb\"\n    >\n      <rect x=\"8\" y=\"15\" rx=\"0\" ry=\"0\" width=\"130\" height=\"20\" />\n      <rect x=\"166\" y=\"15\" rx=\"0\" ry=\"0\" width=\"130\" height=\"20\" />\n      <rect x=\"13\" y=\"368\" rx=\"0\" ry=\"0\" width=\"163\" height=\"19\" />\n      <rect x=\"230\" y=\"353\" rx=\"0\" ry=\"0\" width=\"156\" height=\"36\" />\n      <circle cx=\"80\" cy=\"200\" r=\"41\" />\n      <circle cx=\"200\" cy=\"200\" r=\"41\" />\n      <circle cx=\"330\" cy=\"200\" r=\"41\" />\n    </ContentLoader>\n  );\n}\n\nexport { Loader };\nexport default FsmDemo;\n","import { ActionName, StateName, States } from \"../lib/fsm\";\n\nexport type JsonFsmDef = {\n  name: string;\n  states: Array<[StateName, Array<[ActionName, StateName]> | null]>;\n};\n\nexport type FsmDef = {\n  name: string;\n  states: States;\n};\n\n/*\n * Since json has no support for Maps, this function converts the K,V arrays to maps\n * */\nexport function statesFromJson(states: Array<JsonFsmDef>): Array<FsmDef> {\n  return states.map(({ name, states }) => ({\n    name,\n    states: new Map(\n      states.map(([stateName, actions]) => [\n        stateName,\n        actions && new Map(actions),\n      ])\n    ),\n  }));\n}\n","import { useAsync } from \"react-use\";\nimport { JsonFsmDef, statesFromJson } from \"../utils/parseStates\";\nimport examplesList from \"../examples/examples.json\";\nimport { useMemo } from \"react\";\n\nasync function loadExamplesFromServer() {\n  const response = await fetch(process.env.REACT_APP_EXAMPLES_API!);\n  return response.json();\n}\n\nexport function useFsmExamples() {\n  const { value, error, loading } = useAsync(loadExamplesFromServer);\n\n  const examples = useMemo(() => {\n    if (error) {\n      return statesFromJson(examplesList as Array<JsonFsmDef>);\n    }\n\n    if (loading) {\n      return null;\n    }\n\n    return statesFromJson(value as Array<JsonFsmDef>);\n  }, [value, error, loading]);\n\n  return { examples, loading };\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Box } from \"../atoms\";\nimport CodeView from \"./CodeView\";\nimport FsmDemo, { Loader as FsmDemoLoader } from \"./FsmDemo\";\nimport { useFsmExamples } from \"../hooks/useFsmExamples\";\n\nconst codeExample =\n  \"function FSM() {\\n\" +\n  \"  const [currentState, { allowedActions, doAction }] = useFsm(states);\\n\" +\n  \"  return (\\n\" +\n  \"    <>\\n\" +\n  \"      <pre>Current state: {currentState}</pre>\\n\" +\n  \"      <pre>\\n\" +\n  \"        Actions:\\n\" +\n  \"        {allowedActions.size ? (\\n\" +\n  \"          Array.from(allowedActions).map((action) => (\\n\" +\n  \"            <button key={action} onClick={() => doAction(action)}>\\n\" +\n  \"              {action}\\n\" +\n  \"            </button>\\n\" +\n  \"          ))\\n\" +\n  \"        ) : (\\n\" +\n  \"          <button disabled>N/A</button>\\n\" +\n  \"        )}\\n\" +\n  \"      </pre>\\n\" +\n  \"    </>\\n\" +\n  \"  );\\n\" +\n  \"}\\n\";\n\nfunction FsmExample() {\n  const { examples, loading } = useFsmExamples();\n\n  return (\n    <ExampleContainer>\n      <Box>\n        {loading && <FsmDemoLoader />}\n        {examples && <FsmDemo examples={examples} />}\n      </Box>\n      <CodeView>{codeExample}</CodeView>\n    </ExampleContainer>\n  );\n}\n\nconst ExampleContainer = styled.div`\n  padding: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n\nexport default FsmExample;\n","import React from \"react\";\nimport FsmExample from \"./components/FsmExample\";\nimport { Footer, Theme } from \"./atoms\";\n\nexport default function App() {\n  return (\n    <>\n      <Theme />\n      <header>\n        <h1>react-fsm</h1>\n        <h2>\n          A react hook for creating{\" \"}\n          <a href={\"https://en.wikipedia.org/wiki/Finite-state_machine\"}>\n            Finite-state machine\n          </a>\n        </h2>\n      </header>\n      <main>\n        <FsmExample />\n      </main>\n      <Footer>\n        Created by{\" \"}\n        <a href={\"https://github.com/daniel-hauser\"}>Daniel Hauser</a>\n      </Footer>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}